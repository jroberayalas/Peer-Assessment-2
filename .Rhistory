output$fitted.model
Box.test(res,lag = 1, fitdf = 5, type = "Ljung")
Box.test(res,lag = 2, fitdf = 5, type = "Ljung")
Box.test(res,lag = 24, fitdf = 5, type = "Ljung")
Box.test(res,lag = 210, fitdf = 5, type = "Ljung")
Box.test(res,lag = 24, fitdf = 5, type = "Ljung")
Box.test(res,lag = 10, fitdf = 5, type = "Ljung")
Box.test(res,lag = 11, fitdf = 5, type = "Ljung")
Box.test(res,lag = 12, fitdf = 5, type = "Ljung")
Box.test(res,lag = 1, fitdf = 5, type = "Ljung")
Box.test(res,lag = 15, fitdf = 5, type = "Ljung")
Box.test(res,lag = 20, fitdf = 5, type = "Ljung")
Box.test(res,lag = 25, fitdf = 5, type = "Ljung")
install.packages(c("MASS", "jsonlite", "knitr"))
install.packages("dplyr")
library(np) # non parametric library
data(cps71)
m <- npreg(logwage~age)
plot(m,plot.errors.method="asymptotic",
plot.errors.style="band",
ylim=c(11,15.2))
points(age,logwage,cex=.25)
attach(cps71)
m <- npreg(logwage~age)
plot(m,plot.errors.method="asymptotic",
plot.errors.style="band",
ylim=c(11,15.2))
points(age,logwage,cex=.25)
m
mtcars
rm(list = ls())
data = mtcars
data = mtcars
rm(list = ls())
fit <- npreg(mpg ~ . , data = mtcars)
?npreg
fit <- npreg(formula = mpg ~ . , data = mtcars)
attach(mtcars)
fit <- npreg(formula = mpg ~ .)
rm(list = ls())
detach(mtcars)
fit <- npreg(formula = mpg ~ cyl, data = mtcars)
fit <- npreg(formula = mpg ~ factor(cyl), data = mtcars)
str(mtcars)
fit <- npreg(formula = mpg ~ disp, data = mtcars)
fit <- npreg(formula = mpg ~ disp, data = mtcars, txdat = mtcars[ , 2:11])
fit <- npreg(xdat = mtcars[ , 2:11], ydat = mtcars[ , 1])
fit <- npreg(txdat = mtcars[ , 2:11], tydat = mtcars[ , 1])
fit
plot(fit)
pairs(mtcars)
fit <- npreg(txdat = mtcars[ , 3], tydat = mtcars[ , 1])
plot(fit)
with(mtcars, points(disp, mpg, cex = 0.5))
fit
mean(mtcars[ ,1])
fit <- npreg(txdat = mtcars[ , 4], tydat = mtcars[ , 1])
plot(fit)
with(mtcars, points(disp, mpg, cex = 0.5))
summary(mtcars$disp)
summary(mtcars$hp)
plot(fit)
with(mtcars, points(hp, mpg, cex = 0.5))
fit
?bwnpreg
?npregbw
npregbw(txdat = mtcars[ , 4], tydat = mtcars[ , 1])
npregbw(xdat = mtcars[ , 4], ydat = mtcars[ , 1])
plot(fit)
with(mtcars, points(hp, mpg, cex = 0.5))
plot(fit, plot.errors.method="bootstrap")
plot(fit)
plot(fit, plot.errors.method="bootstrap")
with(mtcars, points(hp, mpg, cex = 0.5))
plot(fit, plot.errors.method="asymptotic", plot.errors.style="band")
with(mtcars, points(hp, mpg, cex = 0.5))
bw <- npregbw(txdat = mtcars[ , 2:11], tydat = mtcars[ , 1])
bw <- npregbw(xdat = mtcars[ , 2:11], ydat = mtcars[ , 1])
npsigtest(bws=bw)
fit <- npreg(txdat = mtcars[ , 3], tydat = mtcars[ , 1])
fit
plot(fit, plot.errors.method="asymptotic", plot.errors.style="band")
with(mtcars, points(disp, mpg, cex = 0.5))
predict(fit, newdata = data.frame(disp = c(300)))
?predict
predict(fit, newdata = 300)
fit <- with(mtcars, npreg(txdat = disp, tydat = mpg))
fit
predict(fit, newdata = data.frame(disp = c(300)))
predict(fit, newdata = data.frame(disp = 300))
?npreg
fit
predict(fit)
predict(fit, newdata = 2)
new = data.frame(disp = 3)
new
predict(fit, newdata = new)
new = data.frame(disp = c(100, 200, 300, 400, 500))
predict(fit, newdata = new)
data(cps71)
model.np <- npreg(logwage ~ age, regtype = "ll", bwmethod = "cv.aic", gradients = TRUE, data = cps71)
model.np <- npreg(logwage ~ age, regtype = "ll", bwmethod = "cv.aic", gradients = TRUE, data = cps71)
cps.eval <- data.frame(age = seq(10,70, by=10))
predict(model.np, newdata = cps.eval)
fit <- with(mtcars, npreg(mpg ~ disp))
fit
predict(fit, newdata = new)
K.gaussian <- function(u) {
exp(- 0.5*u^2) / sqrt(2*pi)
}
K.gaussian(0)
1/sqrt(2*pi)
bw
fit
fit$bw
summary(mtcars$disp)
x <- seq(71, 472, by = 0.1)
disp <- mtcars[ , 3]
mpg <- mtcars[ , 1]
K.gaussian(c(0,0))
mpg <- mtcars[ , 1]
y <- c()
for element in x {
y <- c(y, sum(K.gaussian((element - disp)/fit$bw) * mpg) / sum(K.gaussian((element - disp)/fit$bw))
}
for (element in x) {
y <- c(y, sum(K.gaussian((element - disp)/fit$bw) * mpg) / sum(K.gaussian((element - disp)/fit$bw))
}
for (element in x) {
y <- c(y, sum(K.gaussian((element - disp)/fit$bw) * mpg) / sum(K.gaussian((element - disp)/fit$bw)))
}
plot(x,y)
predict(fit, newdata = new)
for (element in seq(100, 500, by = 100)) {
print(sum(K.gaussian((element - disp)/fit$bw) * mpg) / sum(K.gaussian((element - disp)/fit$bw)))
}
rm(list = ls())
install.packages("sBF")
library(sBF)
X <- matrix(rnorm(1000), ncol=2)
MX1 <- X[,1]^3
MX2 <- sin(X[,2])
X <- matrix(rnorm(1000), ncol=2)
MX1 <- X[,1]^3
MX2 <- sin(X[,2])
Y <- MX1 + MX2
data <- cbind(Y, X)
plot(MX1, Y)
plot(MX2, Y)
plot(X[,2],MX2)
plot(X[,1],MX1)
plot(X[,2],MX2)
plot(X[,1],MX1)
plot(MX1, Y)
plot(MX2, Y)
est <- sBF(data)
par(mfrow=c(1, 2))
plot(est$grid[,1],est$mxhat[,1], type="l",ylab=expression(m[1](x[1])), xlab=expression(x[1]))
curve(x^3, add=TRUE, col="red")
plot(est$grid[,2],est$mxhat[,2], type="l",ylab=expression(m[2](x[2])), xlab=expression(x[2]))
curve(sin(x), add=TRUE, col="red")
par(mfrow=c(1, 1))
est
summary(est)
est$bw
library(np)
names(X)
head(X)
names(data)
data <- as.data.frame(data)
names(data)
names(data) <- c("Y", "X1", "X2")
fit <- npregbw(Y ~ X1 + X2, data = data)
summary(fit)
fit <- npreg(Y ~ X1 + X2, data = data)
plot(fit)
fit <- npregbw(Y ~ X1, data = data)
npregbw(Y ~ X1, data = data)
npregbw(Y ~ X2, data = data)
fit <- npreg(Y ~ X1, data = data)
plot(fit)
plot(est$grid[,1],est$mxhat[,1], type="l",ylab=expression(m[1](x[1])), xlab=expression(x[1]))
curve(x^3, add=TRUE, col="red")
plot(fit)
curve(x^3, add=TRUE, col="red")
fit <- npreg(Y ~ X2, data = data)
plot(fit)
curve(sin(x), add=TRUE, col="red")
plot(est$grid[,2],est$mxhat[,2], type="l",ylab=expression(m[2](x[2])), xlab=expression(x[2]))
curve(sin(x), add=TRUE, col="red")
est$bw
fit <- npreg(Y ~ X2, data = data, bw = est$bw[2])
plot(fit)
curve(sin(x), add=TRUE, col="red")
?npreg
fit <- npreg(Y ~ X2, data = data, bws = est$bw[2])
plot(fit)
curve(sin(x), add=TRUE, col="red")
install.packages("gam")
library(gam)
?s
?lo
?k
?s
data
fit <- gam(Y ~ X1 + X2, data = data)
summary(fit)
plot(fit)
fit <- gam(Y ~ X1 + X2, data = data, family = gaussian)
plot(fit)
data(kyphosis)
gam(Kyphosis ~ s(Age,4) + Number, family = binomial, data=kyphosis, trace=TRUE)
fit <- gam(Kyphosis ~ s(Age,4) + Number, family = binomial, data=kyphosis, trace=TRUE)
plot(fit)
str(kyphosis)
with(kyphosis, hist(Age))
est <- sBF(data)
plot(est$grid[,1],est$mxhat[,1], type="l",ylab=expression(m[1](x[1])), xlab=expression(x[1]))
est <- sBF(data[,1:2])
plot(est$grid[,1],est$mxhat[,1], type="l",ylab=expression(m[1](x[1])), xlab=expression(x[1]))
sBF
K
?dnorm
?sBF
rep(20,2)
est$bw
est <- sBF(data)
est$bw
setwd("~/Desktop/Academico/Coursera/Data Science Specialization/05 Reproducible Research/Peer Assessment 2")
file.exists("Data/StormData.csv.bz2")
if (!file.exists("Data/StormData.csv.bz2")) {
fileURL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
download.file(fileURL, destfile='Data/StormData.csv.bz2', method = 'curl')
}
rm(list = ls())
if (!file.exists("Data/StormData.csv.bz2")) {
fileURL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
download.file(fileURL, destfile='Data/StormData.csv.bz2', method = 'curl')
}
stormData <- read.csv(bzfile('StormData.csv.bz2'),header=TRUE, stringsAsFactors = FALSE)
downloadedData <- date()
if (!file.exists("Data/StormData.csv.bz2")) {
fileURL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
download.file(fileURL, destfile='Data/StormData.csv.bz2', method = 'curl')
}
stormData <- read.csv(bzfile('Data/StormData.csv.bz2'),header=TRUE, stringsAsFactors = FALSE)
downloadedData <- date()
?bzfile
con <- bzfile('Data/StormData.csv.bz2')
stormData <- read.csv(con,header=TRUE, stringsAsFactors = FALSE)
close(con)
close(con)
con
con <- bzfile('Data/StormData.csv.bz2')
con
close(con)
con <- bzfile('Data/StormData.csv.bz2')
stormData <- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
con
rm(list = ls())
if (!file.exists("Data/StormData.csv.bz2")) {
fileURL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
download.file(fileURL, destfile='Data/StormData.csv.bz2', method = 'curl')
}
con <- bzfile('Data/StormData.csv.bz2')
stormData <- read.csv(con)
close(con)
con <- bzfile("StormData.csv.bz2")
stormData <- read.csv(con)
close(con)
str(stormData)
head(stormData, 2)
summary(stormData$PROPDMG)
summary(stormData$PROPDMGEXP)
?summarise
library(dply)
library(dplyr)
?summarise
injuries <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = n())
injuries
injuries <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = n()) %>%
arrange(count)
injuries
injuries <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = n()) %>%
arrange(desc(count))
injuries
injuries <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = sum(INJURIES)) %>%
arrange(desc(count))
injuries
library(dplyr)
fatalities <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = sum(FATALITIES)) %>%
arrange(desc(count))
injuries <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = sum(INJURIES)) %>%
arrange(desc(count))
fatalities
qplot(data = fatalities)
library(ggplot)
library(ggplot2)
qplot(data = fatalities)
qplot(data = fatalities, x = EVTYPE)
qplot(data = fatalities[1:10, ], x = EVTYPE)
qplot(data = fatalities[1:10, ], x = EVTYPE, y = count)
qplot(data = fatalities[1:10, ], x = EVTYPE, y = count, geom = "bar")
qplot(data = fatalities[1:10, ], x = EVTYPE, y = count, geom = "hist")
qplot(data = fatalities[1:10, ], x = EVTYPE, y = count, geom = "bar")
?qplot
fatalities
qplot(data = fatalities, y = count)
qplot(data = fatalities[1:10, ], y = count)
qplot(data = fatalities[1:10, ], y = count, geom = "bar")
qplot(data = fatalities[1:10, ], x = EVTYPE, y = count, geom = "bar")
qplot(data = fatalities[1:10, ], x = EVTYPE, stat = "bin")
qplot(data = fatalities[1:10, ], x = EVTYPE, stat = "identity")
?geom_bar
ggplot(data = fatalities[1:10, ], aes(x = EVTYPE, y = count)) + geom_bar(stat = "identity")
ggplot(data = fatalities[1:10, ], aes(x = EVTYPE, y = count)) + geom_bar(stat = "identity") + coord_flip
ggplot(data = fatalities[1:10, ], aes(x = EVTYPE, y = count)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data = fatalities[1:10, ], aes(x = EVTYPE, y = count)) + geom_bar(stat = "identity")
ggplot(data = fatalities[1:10, ], aes(x = EVTYPE, y = count)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count)) + geom_bar(stat = "identity") + coord_flip()
fatalities
fatalities <- stormData %>%
group_by(EVTYPE) %>%
summarise(count = sum(FATALITIES)) %>%
arrange(desc(count))[1:10, ]
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count)) +
geom_bar(stat = "identity") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
library(RColorBrewer)
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count, fill = count), col = "YlOrRd") +
geom_bar(stat = "identity")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_brewer(palette = "Blues") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_brewer(palette = "YlOrRd") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_brewer(palette = "Accent") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_brewer(palette = "Set3") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
?discrete_scale
brewer.pal(9,"YlOrRd")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_brewer(palette = brewer.pal(10,"YlOrRd") ) +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_color_gradient(palette = brewer.pal(10,"YlOrRd") ) +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_color_gradient(palette = brewer.pal(9,"YlOrRd") ) +
coord_flip()
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_color_gradient(low="red", high="blue") +
coord_flip()
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_color_gradientn(colours=rev(brewer.pal(9,"YlOrRd")))
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
?geom_bar
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count), col = "red") +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
coord_flip() +
xlab("Number of Fatalities") +
ylab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
xlab("Number of Fatalities") +
ylab("Type of Event") +
coord_flip() +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_color_gradient(low="darkkhaki", high="darkgreen") +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
g <- ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
g
g + scale_color_gradient()
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = as.factor(count))) +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
?scale_fill_gradient
g
g + scale_fill_gradient("red", "blue")
g + scale_fill_continuous(low="black", high="pink")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_continuous(low = "yellow", high = "red")
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_continuous(low = "yellow", high = "red") +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_continuous(low = "orange", high = "red") +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = fatalities[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_continuous(low = "blue", high = "red") +
coord_flip() +
ylab("Number of Fatalities") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Fatalities")
ggplot(data = injuries[1:10, ], aes(x = reorder(EVTYPE, count), y = count )) +
geom_bar(stat = "identity", aes(fill = count)) +
scale_fill_continuous(low = "blue", high = "red") +
coord_flip() +
ylab("Number of Injuries") +
xlab("Type of Event") +
ggtitle("Top 10 Weather Events for Injuries")
